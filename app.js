const tg = window.Telegram.WebApp;
const USER_DATA_KEY = 'boont_user_data';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    balance: 2000,
    currency: "BOONT",
    bets: [],
    lastBonusDate: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    tg.expand();
    tg.setHeaderColor('#2E4F4F');
    tg.setBackgroundColor('#121212');
    
    await loadUserData();
    renderUI();
    setupEventListeners();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    checkDailyBonus();
}

// ======================
// –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
// ======================

async function saveUserData() {
    const dataToSave = {
        balance: state.balance,
        bets: state.bets,
        lastBonusDate: state.lastBonusDate
    };

    try {
        // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CloudStorage Telegram
        if (tg?.CloudStorage?.setItem) {
            await tg.CloudStorage.setItem(USER_DATA_KEY, JSON.stringify(dataToSave));
            console.log("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CloudStorage");
        }
        
        // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ fallback
        localStorage.setItem(USER_DATA_KEY, JSON.stringify(dataToSave));
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e);
    }
}

async function loadUserData() {
    let loadedData = null;
    
    try {
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ CloudStorage Telegram
        if (tg?.CloudStorage?.getItem) {
            const cloudData = await tg.CloudStorage.getItem(USER_DATA_KEY);
            if (cloudData) loadedData = JSON.parse(cloudData);
        }
        
        // –ï—Å–ª–∏ –≤ CloudStorage –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º localStorage
        if (!loadedData) {
            const localData = localStorage.getItem(USER_DATA_KEY);
            if (localData) loadedData = JSON.parse(localData);
        }
        
        if (loadedData) {
            state.balance = loadedData.balance || 2000;
            state.bets = loadedData.bets || [];
            state.lastBonusDate = loadedData.lastBonusDate || null;
        }
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", e);
    }
}

// ======================
// –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
// ======================

async function placeBet(amount, prediction, option) {
    if (state.balance < amount) {
        showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BOONT!", 'error');
        return false;
    }

    state.balance -= amount;
    state.bets.push({
        id: Date.now(),
        amount,
        prediction,
        option,
        date: new Date().toISOString(),
        status: 'active'
    });

    await saveUserData();
    updateBalanceDisplay();
    showNotification(`–°—Ç–∞–≤–∫–∞ ${amount} BOONT –ø—Ä–∏–Ω—è—Ç–∞!`, 'success');
    return true;
}

async function checkDailyBonus() {
    const today = new Date().toDateString();
    
    if (!state.lastBonusDate || state.lastBonusDate !== today) {
        state.balance += 1000;
        state.lastBonusDate = today;
        await saveUserData();
        updateBalanceDisplay();
        showNotification("üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å 1000 BOONT!", 'success');
    }
}

// ======================
// –†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
// ======================

function updateBalanceDisplay() {
    const balanceEl = document.querySelector('.balance');
    if (balanceEl) balanceEl.textContent = state.balance.toLocaleString();
}

function showNotification(text, type = 'info') {
    const notification = document.getElementById('notification');
    if (!notification) return;
    
    notification.textContent = text;
    notification.className = 'notification ' + type;
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

function renderUI() {
    updateBalanceDisplay();
    // –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞...
}

function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å–∞
    document.getElementById('bonus-btn')?.addEventListener('click', checkDailyBonus);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞–≤–æ–∫...
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
tg.onEvent('viewportChanged', async (e) => {
    if (e.isStateStable && !tg.isExpanded) {
        await saveUserData();
    }
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', init);
